#!/usr/bin/env python
import time

from matplotlib import pyplot as plt
import numpy as np

import traj.discrete_time_parameterization

j_max = 30.0
a_max = 8.0
v_max = 2.0
p_start = 0.0
p_end = 4.0
time_delta = 0.008


def velocity_limit_function(position):
    return v_max + 0.7 * v_max * np.sin(np.pi * position / 1.0)


def is_valid(position, velocity, acceleration, jerk=None):
    if np.abs(acceleration) > a_max + traj.discrete_time_parameterization.ACCELERATION_THRESHOLD:
        return False
    if velocity > velocity_limit_function(position) + traj.discrete_time_parameterization.VELOCITY_THRESHOLD:
        return False
    if position < 0.0 or position > p_end + traj.discrete_time_parameterization.POSITION_THRESHOLD:
        return False
    if jerk is not None and np.abs(jerk) > j_max:
        return False
    return True


print('Time parameterizing path')
t_start = time.time()
trajectory = traj.discrete_time_parameterization.parameterize_path_discrete(
    p_start, p_end, is_valid, j_max, time_delta)
print('Parameterization completed in {} seconds'.format(time.time() - t_start))
positions, velocities, accelerations, jerks = trajectory.T

max_velocities = np.array([velocity_limit_function(p) for p in positions])

plot_times = np.arange(len(positions)) * time_delta
axes = plt.gcf().subplots(4, sharex=True)
axes[0].plot(plot_times, positions)
axes[0].set_ylabel('position')
for t in np.linspace(0.0, plot_times[-1], 40):
    time_i = int(round(t / time_delta))
    for velocity in np.linspace(0.0, velocities.max() * 1.3, 10):
        color = 'r'
        if is_valid(positions[time_i], velocity, accelerations[time_i], jerks[time_i]):
            color = 'g'
        axes[1].plot(plot_times[time_i], velocity, '.', color=color, alpha=0.2)
axes[1].plot(plot_times, velocities)
axes[1].plot(plot_times, max_velocities, '--')
axes[1].set_ylabel('velocity')
for t in np.linspace(0.0, plot_times[-1], 40):
    time_i = int(round(t / time_delta))
    for acceleration in np.linspace(accelerations.min() - 0.5, accelerations.max() * 1.3, 10):
        color = 'r'
        if is_valid(positions[time_i], velocities[time_i], acceleration, jerks[time_i]):
            color = 'g'
        axes[2].plot(plot_times[time_i], acceleration, '.', color=color, alpha=0.2)
axes[2].plot(plot_times, accelerations)
axes[2].set_ylabel('acceleration')
axes[3].plot(plot_times, jerks)
axes[3].set_ylabel('jerk')
axes[3].set_xlabel('time (s)')

plt.show()
