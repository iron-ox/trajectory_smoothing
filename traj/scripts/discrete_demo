#!/usr/bin/env python
import argparse

from matplotlib import pyplot as plt
import matplotlib.patches
import matplotlib.collections
import numpy as np
import traj

def is_valid(position, velocity, acceleration, jerk=None):
    if np.abs(acceleration) > a_max + traj.discrete_time_parameterization.ACCELERATION_THRESHOLD:
        return False
    if velocity > velocity_limit_function(position) + traj.discrete_time_parameterization.VELOCITY_THRESHOLD:
        return False
    if position < 0.0 or position > p_end + traj.discrete_time_parameterization.POSITION_THRESHOLD:
        return False
    if jerk is not None and np.abs(jerk) > j_max:
        return False
    return True

# Test path
path = np.array([
    (0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    (1.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    (2.0, 1.0, 0.0, 0.0, 0.0, 0.0),
    ])

parser = argparse.ArgumentParser(description='Parameterize a geometric path.')
parser.add_argument('--blend-radius', default=0.2, type=float,
                    help='radius of blend arcs in joint space (zero for no blending)')
args = parser.parse_args()

if args.blend_radius > 0.0:
    path_function = traj.parameterize_path_with_blends(path, args.blend_radius)
else:
    path_function = traj.parameterize_path(path)

# Plot each joint vs s.
traj.plot.plot_path(plt.gca(), path_function)


traj.plot.plot_trajectory(plt.figure(), trajectory_position_function, trajectory_velocity_function,
                          trajectory_acceleration_function, trajectory_jerk_function)

plt.show()

# Plot the waypoints in the original path for comparison.
plt.plot([q[0] for q in path], [q[1] for q in path], 'bx', label='original waypoints')


plt.show()
